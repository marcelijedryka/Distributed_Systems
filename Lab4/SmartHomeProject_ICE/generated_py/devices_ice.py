# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `devices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'InvalidCommand' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidCommand = Ice.createTempClass()
    class InvalidCommand(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidCommand'

    _M_SmartHome._t_InvalidCommand = IcePy.defineException('::SmartHome::InvalidCommand', InvalidCommand, (), False, None, ())
    InvalidCommand._ice_type = _M_SmartHome._t_InvalidCommand

    _M_SmartHome.InvalidCommand = InvalidCommand
    del InvalidCommand

if 'DeviceInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.DeviceInfo = Ice.createTempClass()
    class DeviceInfo(object):
        def __init__(self, name='', location='', informations=''):
            self.name = name
            self.location = location
            self.informations = informations

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.location)
            _h = 5 * _h + Ice.getHash(self.informations)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.DeviceInfo):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.location is None or other.location is None:
                    if self.location != other.location:
                        return (-1 if self.location is None else 1)
                else:
                    if self.location < other.location:
                        return -1
                    elif self.location > other.location:
                        return 1
                if self.informations is None or other.informations is None:
                    if self.informations != other.informations:
                        return (-1 if self.informations is None else 1)
                else:
                    if self.informations < other.informations:
                        return -1
                    elif self.informations > other.informations:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceInfo)

        __repr__ = __str__

    _M_SmartHome._t_DeviceInfo = IcePy.defineStruct('::SmartHome::DeviceInfo', DeviceInfo, (), (
        ('name', (), IcePy._t_string),
        ('location', (), IcePy._t_string),
        ('informations', (), IcePy._t_string)
    ))

    _M_SmartHome.DeviceInfo = DeviceInfo
    del DeviceInfo

_M_SmartHome._t_Device = IcePy.defineValue('::SmartHome::Device', Ice.Value, -1, (), False, True, None, ())

if 'DevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicePrx = Ice.createTempClass()
    class DevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHome.Device._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHome.Device._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHome.Device._op_turnOff.end(self, _r)

        def getState(self, context=None):
            return _M_SmartHome.Device._op_getState.invoke(self, ((), context))

        def getStateAsync(self, context=None):
            return _M_SmartHome.Device._op_getState.invokeAsync(self, ((), context))

        def begin_getState(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getState.begin(self, ((), _response, _ex, _sent, context))

        def end_getState(self, _r):
            return _M_SmartHome.Device._op_getState.end(self, _r)

        def getInfo(self, context=None):
            return _M_SmartHome.Device._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.Device._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Device._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.Device._op_getInfo.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.DevicePrx.ice_checkedCast(proxy, '::SmartHome::Device', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.DevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'
    _M_SmartHome._t_DevicePrx = IcePy.defineProxy('::SmartHome::Device', DevicePrx)

    _M_SmartHome.DevicePrx = DevicePrx
    del DevicePrx

    _M_SmartHome.Device = Ice.createTempClass()
    class Device(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device')

        def ice_id(self, current=None):
            return '::SmartHome::Device'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Device'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def getState(self, current=None):
            raise NotImplementedError("servant method 'getState' not implemented")

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_DeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_DeviceDisp = IcePy.defineClass('::SmartHome::Device', Device, (), None, ())
    Device._ice_type = _M_SmartHome._t_DeviceDisp

    Device._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Device._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Device._op_getState = IcePy.Operation('getState', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Device._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_DeviceInfo, False, 0), ())

    _M_SmartHome.Device = Device
    del Device

_M_SmartHome._t_Fridge = IcePy.defineValue('::SmartHome::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.FridgePrx = Ice.createTempClass()
    class FridgePrx(_M_SmartHome.DevicePrx):

        def setTemperature(self, temperature, context=None):
            return _M_SmartHome.Fridge._op_setTemperature.invoke(self, ((temperature, ), context))

        def setTemperatureAsync(self, temperature, context=None):
            return _M_SmartHome.Fridge._op_setTemperature.invokeAsync(self, ((temperature, ), context))

        def begin_setTemperature(self, temperature, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_setTemperature.begin(self, ((temperature, ), _response, _ex, _sent, context))

        def end_setTemperature(self, _r):
            return _M_SmartHome.Fridge._op_setTemperature.end(self, _r)

        def getTemperature(self, context=None):
            return _M_SmartHome.Fridge._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_SmartHome.Fridge._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Fridge._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_SmartHome.Fridge._op_getTemperature.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.FridgePrx.ice_checkedCast(proxy, '::SmartHome::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'
    _M_SmartHome._t_FridgePrx = IcePy.defineProxy('::SmartHome::Fridge', FridgePrx)

    _M_SmartHome.FridgePrx = FridgePrx
    del FridgePrx

    _M_SmartHome.Fridge = Ice.createTempClass()
    class Fridge(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Fridge')

        def ice_id(self, current=None):
            return '::SmartHome::Fridge'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Fridge'

        def setTemperature(self, temperature, current=None):
            raise NotImplementedError("servant method 'setTemperature' not implemented")

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_FridgeDisp)

        __repr__ = __str__

    _M_SmartHome._t_FridgeDisp = IcePy.defineClass('::SmartHome::Fridge', Fridge, (), None, (_M_SmartHome._t_DeviceDisp,))
    Fridge._ice_type = _M_SmartHome._t_FridgeDisp

    Fridge._op_setTemperature = IcePy.Operation('setTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_InvalidCommand,))
    Fridge._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_SmartHome.Fridge = Fridge
    del Fridge

_M_SmartHome._t_Lights = IcePy.defineValue('::SmartHome::Lights', Ice.Value, -1, (), False, True, None, ())

if 'LightsPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LightsPrx = Ice.createTempClass()
    class LightsPrx(_M_SmartHome.DevicePrx):

        def setBrightness(self, brightness, context=None):
            return _M_SmartHome.Lights._op_setBrightness.invoke(self, ((brightness, ), context))

        def setBrightnessAsync(self, brightness, context=None):
            return _M_SmartHome.Lights._op_setBrightness.invokeAsync(self, ((brightness, ), context))

        def begin_setBrightness(self, brightness, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lights._op_setBrightness.begin(self, ((brightness, ), _response, _ex, _sent, context))

        def end_setBrightness(self, _r):
            return _M_SmartHome.Lights._op_setBrightness.end(self, _r)

        def getBrightness(self, context=None):
            return _M_SmartHome.Lights._op_getBrightness.invoke(self, ((), context))

        def getBrightnessAsync(self, context=None):
            return _M_SmartHome.Lights._op_getBrightness.invokeAsync(self, ((), context))

        def begin_getBrightness(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Lights._op_getBrightness.begin(self, ((), _response, _ex, _sent, context))

        def end_getBrightness(self, _r):
            return _M_SmartHome.Lights._op_getBrightness.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LightsPrx.ice_checkedCast(proxy, '::SmartHome::Lights', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LightsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lights'
    _M_SmartHome._t_LightsPrx = IcePy.defineProxy('::SmartHome::Lights', LightsPrx)

    _M_SmartHome.LightsPrx = LightsPrx
    del LightsPrx

    _M_SmartHome.Lights = Ice.createTempClass()
    class Lights(_M_SmartHome.Device):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::Lights')

        def ice_id(self, current=None):
            return '::SmartHome::Lights'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Lights'

        def setBrightness(self, brightness, current=None):
            raise NotImplementedError("servant method 'setBrightness' not implemented")

        def getBrightness(self, current=None):
            raise NotImplementedError("servant method 'getBrightness' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LightsDisp)

        __repr__ = __str__

    _M_SmartHome._t_LightsDisp = IcePy.defineClass('::SmartHome::Lights', Lights, (), None, (_M_SmartHome._t_DeviceDisp,))
    Lights._ice_type = _M_SmartHome._t_LightsDisp

    Lights._op_setBrightness = IcePy.Operation('setBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_InvalidCommand,))
    Lights._op_getBrightness = IcePy.Operation('getBrightness', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.Lights = Lights
    del Lights

if 'ColorPalette' not in _M_SmartHome.__dict__:
    _M_SmartHome.ColorPalette = Ice.createTempClass()
    class ColorPalette(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ColorPalette.RED = ColorPalette("RED", 0)
    ColorPalette.BLUE = ColorPalette("BLUE", 1)
    ColorPalette.GREEN = ColorPalette("GREEN", 2)
    ColorPalette.WHITE = ColorPalette("WHITE", 3)
    ColorPalette.VIOLET = ColorPalette("VIOLET", 4)
    ColorPalette.YELLOW = ColorPalette("YELLOW", 5)
    ColorPalette.ORANGE = ColorPalette("ORANGE", 6)
    ColorPalette._enumerators = { 0:ColorPalette.RED, 1:ColorPalette.BLUE, 2:ColorPalette.GREEN, 3:ColorPalette.WHITE, 4:ColorPalette.VIOLET, 5:ColorPalette.YELLOW, 6:ColorPalette.ORANGE }

    _M_SmartHome._t_ColorPalette = IcePy.defineEnum('::SmartHome::ColorPalette', ColorPalette, (), ColorPalette._enumerators)

    _M_SmartHome.ColorPalette = ColorPalette
    del ColorPalette

_M_SmartHome._t_LEDLights = IcePy.defineValue('::SmartHome::LEDLights', Ice.Value, -1, (), False, True, None, ())

if 'LEDLightsPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.LEDLightsPrx = Ice.createTempClass()
    class LEDLightsPrx(_M_SmartHome.LightsPrx):

        def setColor(self, colour, context=None):
            return _M_SmartHome.LEDLights._op_setColor.invoke(self, ((colour, ), context))

        def setColorAsync(self, colour, context=None):
            return _M_SmartHome.LEDLights._op_setColor.invokeAsync(self, ((colour, ), context))

        def begin_setColor(self, colour, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LEDLights._op_setColor.begin(self, ((colour, ), _response, _ex, _sent, context))

        def end_setColor(self, _r):
            return _M_SmartHome.LEDLights._op_setColor.end(self, _r)

        def getColor(self, context=None):
            return _M_SmartHome.LEDLights._op_getColor.invoke(self, ((), context))

        def getColorAsync(self, context=None):
            return _M_SmartHome.LEDLights._op_getColor.invokeAsync(self, ((), context))

        def begin_getColor(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.LEDLights._op_getColor.begin(self, ((), _response, _ex, _sent, context))

        def end_getColor(self, _r):
            return _M_SmartHome.LEDLights._op_getColor.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.LEDLightsPrx.ice_checkedCast(proxy, '::SmartHome::LEDLights', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.LEDLightsPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LEDLights'
    _M_SmartHome._t_LEDLightsPrx = IcePy.defineProxy('::SmartHome::LEDLights', LEDLightsPrx)

    _M_SmartHome.LEDLightsPrx = LEDLightsPrx
    del LEDLightsPrx

    _M_SmartHome.LEDLights = Ice.createTempClass()
    class LEDLights(_M_SmartHome.Lights):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Device', '::SmartHome::LEDLights', '::SmartHome::Lights')

        def ice_id(self, current=None):
            return '::SmartHome::LEDLights'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::LEDLights'

        def setColor(self, colour, current=None):
            raise NotImplementedError("servant method 'setColor' not implemented")

        def getColor(self, current=None):
            raise NotImplementedError("servant method 'getColor' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_LEDLightsDisp)

        __repr__ = __str__

    _M_SmartHome._t_LEDLightsDisp = IcePy.defineClass('::SmartHome::LEDLights', LEDLights, (), None, (_M_SmartHome._t_LightsDisp,))
    LEDLights._ice_type = _M_SmartHome._t_LEDLightsDisp

    LEDLights._op_setColor = IcePy.Operation('setColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_ColorPalette, False, 0),), (), None, ())
    LEDLights._op_getColor = IcePy.Operation('getColor', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_ColorPalette, False, 0), ())

    _M_SmartHome.LEDLights = LEDLights
    del LEDLights

# End of module SmartHome
